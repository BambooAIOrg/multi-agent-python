name: Deploy to Aliyun SAE

on:
  push:
    branches: [ master, main ]  # 当推送到master或main分支时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Convert repository owner to lowercase
      id: repo_owner_lowercase
      run: |
        echo "value=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ steps.repo_owner_lowercase.outputs.value }}/vocab-agent:${{ github.sha }},ghcr.io/${{ steps.repo_owner_lowercase.outputs.value }}/vocab-agent:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # 为SAE创建访问镜像的令牌
    - name: Create GitHub PAT for SAE
      id: create_token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.GH_APP_ID }}
        private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        repositories: ${{ github.event.repository.name }}
    
    - name: Install Aliyun CLI
      run: |
        curl -o aliyun-cli-linux-latest-amd64.tgz https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz
        tar -xvzf aliyun-cli-linux-latest-amd64.tgz
        sudo mv aliyun /usr/local/bin/
        
    - name: Configure Aliyun CLI
      run: |
        aliyun configure set --profile default --mode AK --region ap-southeast-1 --access-key-id ${{ secrets.ALIYUN_ACCESS_KEY_ID }} --access-key-secret ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
    
    - name: Deploy to SAE
      run: |
        # 获取应用ID
        APP_ID=${{ secrets.ALIYUN_SAE_APP_ID }}
        
        # 设置认证信息和区域
        REGION="ap-southeast-1"
        ENDPOINT="sae.${REGION}.aliyuncs.com"
        
        # 准备Docker配置JSON - 按照文档格式正确创建
        AUTH_STRING=$(echo -n "${{ github.repository_owner }}:${{ steps.create_token.outputs.token }}" | base64 | tr -d '\n')
        DOCKER_CONFIG="{\"auths\":{\"ghcr.io\":{\"username\":\"${{ github.repository_owner }}\",\"password\":\"${{ steps.create_token.outputs.token }}\",\"auth\":\"$AUTH_STRING\"}}}"
        DOCKER_CONFIG_BASE64=$(echo -n "$DOCKER_CONFIG" | base64 | tr -d '\n')
        
        # 创建容器镜像仓库访问凭证的Secret
        echo "Creating secret for container registry..."
        SECRET_NAME="github-container-registry-auth"
        
        # 创建正确格式的SecretData
        SECRET_DATA="{\"SecretData\":\"{\\\".dockerconfigjson\\\":\\\"$DOCKER_CONFIG_BASE64\\\"}\"}"
        
        # 检查Secret是否存在
        SECRET_EXISTS=$(aliyun sae GET /pop/v1/sam/secret/secrets --region $REGION | grep -c "$SECRET_NAME" || true)
        
        if [ "$SECRET_EXISTS" -gt "0" ]; then
          echo "Updating existing secret..."
          aliyun sae PUT /pop/v1/sam/secret/secret \
            --region $REGION \
            --SecretId "$SECRET_NAME" \
            --NamespaceId "${{ secrets.ALIYUN_SAE_NAMESPACE_ID }}" \
            --SecretData "$SECRET_DATA" \
            --header "Content-Type=application/json;"
        else
          echo "Creating new secret..."
          aliyun sae POST /pop/v1/sam/secret/secret \
            --region $REGION \
            --NamespaceId "${{ secrets.ALIYUN_SAE_NAMESPACE_ID }}" \
            --SecretName "$SECRET_NAME" \
            --SecretType "kubernetes.io/dockerconfigjson" \
            --SecretData "$SECRET_DATA" \
            --header "Content-Type=application/json;"
        fi
        
        # 更新SAE应用配置
        echo "Deploying SAE application..."
        aliyun sae POST /pop/v1/sam/app/deployApplication \
          --region $REGION \
          --AppId "$APP_ID" \
          --PackageType "Image" \
          --PackageVersion "latest" \
          --PackageUrl "ghcr.io/${{ steps.repo_owner_lowercase.outputs.value }}/vocab-agent:${{ github.sha }}" \
          --ImagePullSecret "$SECRET_NAME" \
          --Envs "[{\"name\":\"LIVEKIT_URL\",\"value\":\"${{ secrets.LIVEKIT_URL }}\"},
                 {\"name\":\"LIVEKIT_API_KEY\",\"value\":\"${{ secrets.LIVEKIT_API_KEY }}\"},
                 {\"name\":\"LIVEKIT_API_SECRET\",\"value\":\"${{ secrets.LIVEKIT_API_SECRET }}\"},
                 {\"name\":\"OPENAI_API_KEY\",\"value\":\"${{ secrets.OPENAI_API_KEY }}\"},
                 {\"name\":\"ALIYUN_APPKEY\",\"value\":\"${{ secrets.ALIYUN_APPKEY }}\"},
                 {\"name\":\"ALIYUN_ACCESS_KEY_ID\",\"value\":\"${{ secrets.ALIYUN_ACCESS_KEY_ID }}\"},
                 {\"name\":\"ALIYUN_ACCESS_KEY_SECRET\",\"value\":\"${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}\"},
                 {\"name\":\"MINIMAX_GROUP_ID\",\"value\":\"${{ secrets.MINIMAX_GROUP_ID }}\"},
                 {\"name\":\"MINIMAX_API_KEY\",\"value\":\"${{ secrets.MINIMAX_API_KEY }}\"},
                 {\"name\":\"ENV\",\"value\":\"production\"}]" \
          --header "Content-Type=application/json;" 